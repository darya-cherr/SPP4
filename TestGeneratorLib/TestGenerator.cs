using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestGeneratorLib
{
    public class TestGenerator
    {
        public Task<string> Generate(string code)
        {
            Task<string> result = Task<string>.Factory.StartNew(() =>
            {
                CodeAnalyzer analyzer = new CodeAnalyzer();
                CompilationUnitSyntax root = SyntaxFactory.CompilationUnit();
                
                NamespaceInfo namespaceInfo = analyzer.Analyse(code);
                SyntaxList<UsingDirectiveSyntax> usings = GenerateUsings(namespaceInfo);
                SyntaxList<MemberDeclarationSyntax> namespaces = GenerateNamespace(namespaceInfo);
                
                root = root.WithUsings(usings).WithMembers(namespaces);
                
                return root.NormalizeWhitespace().ToFullString();
            });
            
            return result;
        }
        private SyntaxList<UsingDirectiveSyntax> GenerateUsings(NamespaceInfo declaration)
        {
            return SyntaxFactory.List<UsingDirectiveSyntax>(new UsingDirectiveSyntax[]{
                SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName("NUnit.Framework")),
                SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName(declaration.Name))});
        }
        
         private SyntaxList<MemberDeclarationSyntax> GenerateNamespace(NamespaceInfo declaration)
         {
             return SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                 SyntaxFactory.NamespaceDeclaration(SyntaxFactory.IdentifierName(declaration.Name + "Test"))
                     .WithMembers(GenerateClass(declaration.ClassName)));
         }
         
          private SyntaxList<MemberDeclarationSyntax> GenerateClass(ClassInfo declaration)
        {
            return SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                SyntaxFactory.ClassDeclaration(declaration.Name + "Test")
                    .WithAttributeLists(
                        SyntaxFactory.SingletonList<AttributeListSyntax>(
                            SyntaxFactory.AttributeList(
                                SyntaxFactory.SingletonSeparatedList<AttributeSyntax>(
                                    SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestFixture"))))))
                    .WithModifiers(
                        SyntaxFactory.TokenList(
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                    .WithMembers(GenerateMethods(declaration.Methods)));
        }
        
        public SyntaxList<MemberDeclarationSyntax> GenerateMethods(IEnumerable<MethodInfo> declaration)
        {
            return SyntaxFactory.List<MemberDeclarationSyntax>(
                declaration.Select<MethodInfo, MemberDeclarationSyntax>(x => SyntaxFactory.MethodDeclaration(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.VoidKeyword)), SyntaxFactory.Identifier(x.Name + "Test"))
                    .WithAttributeLists(
                        SyntaxFactory.SingletonList<AttributeListSyntax>(
                            SyntaxFactory.AttributeList(
                                SyntaxFactory.SingletonSeparatedList<AttributeSyntax>(
                                    SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("Test"))))))
                    .WithBody(
                        SyntaxFactory.Block(
                            SyntaxFactory.SingletonList<StatementSyntax>(
                                SyntaxFactory.ExpressionStatement(
                                    SyntaxFactory.InvocationExpression(
                                            SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, SyntaxFactory.IdentifierName("Assert"), SyntaxFactory.IdentifierName("Fail")))
                                        .WithArgumentList(
                                            SyntaxFactory.ArgumentList(
                                                SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                                    SyntaxFactory.Argument(
                                                        SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression, SyntaxFactory.Literal("autogenerated"))))))))))));
        }
        
    }
}